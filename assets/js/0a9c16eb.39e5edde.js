"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[37],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(h,a(a({ref:t},m),{},{components:n})):r.createElement(h,a({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a=void 0,l={unversionedId:"Mimir/intro",id:"Mimir/intro",title:"intro",description:"logo",source:"@site/docs/Mimir/intro.md",sourceDirName:"Mimir",slug:"/Mimir/intro",permalink:"/documents/docs/Mimir/intro",draft:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docusaurus-docs/docs/Mimir/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mimirDocs",next:{title:"Redux - overview",permalink:"/documents/docs/category/redux---overview"}},s={},p=[{value:"\ud83c\udf1f About the Project",id:"-about-the-project",level:2},{value:"\ud83d\udc7e Tech Stack",id:"-tech-stack",level:3},{value:"\ud83d\udd11 Environment Variables",id:"-environment-variables",level:3},{value:"\ud83d\udcbe Getting Started",id:"-getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Git clone and Docker setup",id:"git-clone-and-docker-setup",level:3},{value:"\ud83c\udfc3\u200d\u2642\ufe0f Running Locally",id:"\ufe0f-running-locally",level:3},{value:"\ud83d\udcbb Using Yalc for Local Development",id:"-using-yalc-for-local-development",level:2},{value:"1. Install Yalc",id:"1-install-yalc",level:3},{value:"2. Publish the Component Library to Yalc",id:"2-publish-the-component-library-to-yalc",level:3},{value:"3. Add the Component Library to the Mimir Project",id:"3-add-the-component-library-to-the-mimir-project",level:3},{value:"4. Link the Component Library (Optional)",id:"4-link-the-component-library-optional",level:3},{value:"5. Push Updates (Optional)",id:"5-push-updates-optional",level:3},{value:"6. Remove the Component Library (Optional)",id:"6-remove-the-component-library-optional",level:3},{value:"7. Update the Component Library (Optional)",id:"7-update-the-component-library-optional",level:3},{value:"\ud83d\udc4b Contributing",id:"-contributing",level:2},{value:"\ud83c\udfec Architecture",id:"-architecture",level:2},{value:"\ud83d\udcdc Code of Conduct",id:"-code-of-conduct",level:3},{value:"\u26a0\ufe0f License",id:"\ufe0f-license",level:2},{value:"\ud83e\udd1d Contact",id:"-contact",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(c,(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"logo",src:n(3209).Z,width:"1301",height:"501"})),(0,i.kt)("div",{align:"center"},(0,i.kt)("p",null,"A tool for building semantically supported facility data!"),(0,i.kt)("p",null,(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/actions/workflows/main.yaml"},(0,i.kt)("img",{src:"https://github.com/mimir-org/mimir/actions/workflows/main.yaml/badge.svg?branch=main",alt:"build status"})),(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/graphs/contributors"},(0,i.kt)("img",{src:"https://img.shields.io/github/contributors/mimir-org/mimir",alt:"contributors"})),(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/commits/main"},(0,i.kt)("img",{src:"https://img.shields.io/github/last-commit/mimir-org/mimir",alt:"last update"})),(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/issues/"},(0,i.kt)("img",{src:"https://img.shields.io/github/issues/mimir-org/mimir",alt:"open issues"})),(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/blob/master/LICENSE"},(0,i.kt)("img",{src:"https://img.shields.io/github/license/mimir-org/mimir.svg",alt:"license"})),(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/releases"},(0,i.kt)("img",{src:"https://img.shields.io/github/v/release/mimir-org/mimir",alt:"releases"})),(0,i.kt)("a",{href:"https://hub.docker.com/repository/docker/mimirorg/mimir-client"},(0,i.kt)("img",{alt:"Docker client version",src:"https://img.shields.io/docker/v/mimirorg/mimir-client?label=docker%20client%20version"})),(0,i.kt)("a",{href:"https://hub.docker.com/repository/docker/mimirorg/mimir-client"},(0,i.kt)("img",{alt:"Docker server version",src:"https://img.shields.io/docker/v/mimirorg/mimir-server?label=docker%20server%20version"}))),(0,i.kt)("h4",null,(0,i.kt)("a",{href:"https://github.com/mimir-org/mimir/issues"},"Report a bug or register a feature"))),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"-about-the-project"},"\ud83c\udf1f About the Project"),(0,i.kt)("h3",{id:"-tech-stack"},"\ud83d\udc7e Tech Stack"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Client"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.typescriptlang.org/"},"Typescript")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://reactjs.org/"},"React.js")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://reactrouterdotcom.fly.dev/"},"React Router")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://react-hook-form.com/"},"React Redux")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://styled-components.com/"},"styled-components")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://reactflow.dev/"},"React Flow")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://styled-icons.dev/"},"styled-icons")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://threejs.org/"},"three.js")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Server"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://dotnet.microsoft.com/en-us/languages/csharp"},"C#")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.microsoft.com/en-us/aspnet/core/"},"ASP.NET")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.newtonsoft.com/json"},"Json.NET")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://docs.microsoft.com/en-us/ef/"},"Entity Framework")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://automapper.org/"},"AutoMapper")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://xunit.net/"},"xUnit.NET")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore"},"Swashbuckle")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://github.com/moq/moq4"},"Moq")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://github.com/pankleks/TypeScriptBuilder"},"TypeScriptBuilder")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://dotnetrdf.org/"},"dotNetRDF")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Database"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.microsoft.com/en-us/sql-server/"},"MSSQL")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DevOps"),(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.docker.com/"},"Docker")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.nuget.org/"},"NuGet")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://github.com/features/actions"},"Github Actions")),(0,i.kt)("li",null,(0,i.kt)("a",{href:"https://www.npmjs.com/"},"NPM")))),(0,i.kt)("h3",{id:"-environment-variables"},"\ud83d\udd11 Environment Variables"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Client"),(0,i.kt)("p",null,"To set environment variables for client in development, edit the .env file. For production build, you have to set the environment variables into the container itself. You can override the .env with a .env.local file. This file is not included in git repo."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_API_BASE_URL")," - Url to backend server"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_SOCKET_BASE_URL")," - Url to backend server used with websocket connection"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_APP_ID")," - Application id of server app registration in Azure AD"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_CLIENT_ID")," - Application id of client app registration in Azure AD"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_TENANT_ID")," - Azure tenant"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_MIMIR_VERSION")," - The Mimir version number"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_APP_INSIGHTS_CONNECTION_STRING")," - Application insight connection string"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REACT_APP_SILENT")," - Turn off MSAL connection"),(0,i.kt)("p",null,"If you are running the server locally then the values will most likely be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// where x and y = api version\nREACT_APP_API_BASE_URL = http://localhost:5001/v{x}.{y}/\nREACT_APP_SOCKET_BASE_URL = http://localhost:5001/\nREACT_APP_APP_ID = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nREACT_APP_CLIENT_ID = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nREACT_APP_TENANT_ID = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nREACT_APP_MIMIR_VERSION = 2.0\nREACT_APP_APP_INSIGHTS_CONNECTION_STRING = InstrumentationKey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx;...\nREACT_APP_SILENT = false\n"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Server"),(0,i.kt)("p",null,"To set environment variables for server in development, edit the appsettings.json file. For production build, you have to set the environment variables into the application container itself. You can override the appsettings.json with a appsettings.local.json file. This file is not included in git repo."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ASPNETCORE_ENVIRONMENT")," - Set .NET core environment"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__CollaborationPartner__Name")," - Name of default collaboration partner ex. Mimirorg"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__CollaborationPartner__Domain")," - Domain of default collaboration partner ex. mimirorg.com"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__CollaborationPartner__Iris__0")," - RDF domain of collaboration partner, e.g. rdf.mimirorg.com"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__TypeLibraryRootUri")," - The root uri to Type Library"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__TypeLibraryVersion")," - The version used by Type Library"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__TypeLibrarySecret")," - The secret registered in Type Library. Used to identify and registered hooks"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationSetting__TypeLibraryDomain")," - The type library domain"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AzureActiveDirectoryConfiguration__TenantId")," - Azure tenant"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AzureActiveDirectoryConfiguration__ClientId")," - Application id of Server application in Azure AD (app registration)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AzureActiveDirectoryConfiguration__Silent")," - Set authentication and authorisation in silent demo mode"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CorsConfiguration__ValidOrigins")," - Comma separated string of valid origins for CORS. E.g. http://localhost:3000,",(0,i.kt)("a",{parentName:"p",href:"https://mimirorg.com"},"https://mimirorg.com")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConfiguration__DataSource")," - Identifier for database server"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConfiguration__Port")," - Port of database server. E.g. 1443"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConfiguration__InitialCatalog")," - Database name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConfiguration__DbUser")," - Server application database username, must be db owner on given catalog"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DatabaseConfiguration__Password")," - Server application database password")),(0,i.kt)("h2",{id:"-getting-started"},"\ud83d\udcbe Getting Started"),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"This project uses .NET 6 for the server and NPM as package manager for the client,\nmake sure that you have these installed before continuing. Mimir has dependency on Type Library Service, so you also need to clone that project for development purposes.\nClone that project as well if not running on external server. You also need a MSSQL database running on your machine. See docker-compose for running sql in docker."),(0,i.kt)("h3",{id:"git-clone-and-docker-setup"},"Git clone and Docker setup"),(0,i.kt)("p",null,"We recomend that you first create a folder 'Mimirorg' and move into that folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"..\\Mimirorg\n")),(0,i.kt)("p",null,"Then you clone Mimir:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone git@github.com:mimir-org/mimir.git\n")),(0,i.kt)("p",null,"And then you clone typelibrary (Tyle):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone git@github.com:mimir-org/typelibrary.git\n")),(0,i.kt)("p",null,"You now have two new folders inside the 'Mimiorg' folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"..\\Mimirorg\\mimir\n..\\Mimirorg\\typelibrary\n")),(0,i.kt)("p",null,"In this setup we use docker and a docker-compose script. Create a new file at the root of the 'Mimirorg' folder and name it 'docker-compose.yaml'. Copy & paste this content into the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"version: \"3.8\"\n\nservices:\n\n   tyle-client:\n    build: ./typelibrary/src/client\n    hostname: 'tyleclient'\n    container_name: tyleclient\n    ports:\n      - \"3001:80\"\n    environment:\n      - TYPELIBRARY_ENV_API_BASE_URL=http://localhost:5001/v1.0/\n    networks:\n      - type_library_network\n\n   mimir-client:\n    build:\n     context: ./mimir/src/client\n     args:\n      - MIMIR_VERSION=2.5.0\n    hostname: 'mimirclient'\n    container_name: mimirclient\n    ports:\n     - \"3000:80\"\n    environment:\n     - MIMIR_ENV_API_BASE_URL=http://localhost:5000/v1.0/\n     - MIMIR_ENV_SOCKET_BASE_URL=http://localhost:5000/\n     - MIMIR_ENV_APP_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n     - MIMIR_ENV_CLIENT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n     - MIMIR_ENV_TENANT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n     - MIMIR_ENV_APP_INSIGHTS_CONNECTION_STRING=InstrumentationKey=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/\n     - MIMIR_ENV_SILENT=false\n    networks:\n     - type_library_network\n\n   tyle-server:\n    build: ./typelibrary/src/server\n    hostname: 'tyleserver'\n    container_name: tyleserver\n    ports:\n      - \"5001:80\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - DatabaseConfiguration__DataSource=mssql\n      - DatabaseConfiguration__Port=1433\n      - DatabaseConfiguration__InitialCatalog=TypeLibrary\n      - DatabaseConfiguration__DbUser=sa\n      - DatabaseConfiguration__Password=P4ssw0rd1\n      - MimirorgAuthSettings__DatabaseConfiguration__DataSource=mssql\n      - MimirorgAuthSettings__DatabaseConfiguration__Port=1433\n      - MimirorgAuthSettings__DatabaseConfiguration__InitialCatalog=MimirorgAuthentication\n      - MimirorgAuthSettings__DatabaseConfiguration__DbUser=sa\n      - MimirorgAuthSettings__DatabaseConfiguration__Password=P4ssw0rd1\n      - ApplicationSettings__ApplicationSemanticUrl=http://localhost:5001/v1/ont\n      - ApplicationSettings__ApplicationUrl=http://localhost:5001\n      - CorsConfiguration__ValidOrigins=http://localhost:3001\n    networks:\n      - type_library_network\n    depends_on:\n      - mssql\n\n   mimir-server:\n    build: ./mimir/src/service\n    hostname: 'mimirserver'\n    container_name: mimirserver\n    ports:\n      - \"5000:80\"\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - DatabaseConfiguration__DataSource=mssql\n      - DatabaseConfiguration__Port=1433\n      - DatabaseConfiguration__InitialCatalog=ModelBuilder\n      - DatabaseConfiguration__DbUser=sa\n      - DatabaseConfiguration__Password=P4ssw0rd1\n      - AzureActiveDirectoryConfiguration__TenantId=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n      - AzureActiveDirectoryConfiguration__ClientId=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n      - AzureActiveDirectoryConfiguration__Silent=false\n      - CorsConfiguration__ValidOrigins=http://localhost:3000\n      - ApplicationSetting__TypeLibraryRootUri=http://tyleserver/\n      - ApplicationSetting__TypeLibraryVersion=v1\n      - ApplicationSetting__TypeLibrarySecret=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      - ApplicationSetting__TypeLibraryDomain=runir.net\n    networks:\n      - type_library_network\n    depends_on:\n      - mssql\n\n   mssql:\n    image: \"mcr.microsoft.com/mssql/server:2017-CU8-ubuntu\"\n    hostname: 'mssql'\n    container_name: mssql\n    ports:\n      - '127.0.0.1:1433:1433'\n    volumes:\n      - mssql:/var/opt/mssql\n    environment:\n      - ACCEPT_EULA=Y\n      - MSSQL_SA_PASSWORD=P4ssw0rd1\n      - MSSQL_PID=Standard\n    networks:\n      - type_library_network\n    restart: unless-stopped\n\nvolumes:\n  mssql:\n    driver: local\n\nnetworks:\n  type_library_network:\n    driver: bridge\n\n")),(0,i.kt)("p",null,"To keep it simple in this example we use db user: 'sa' and db passord: 'P4ssw0rd1'. You can change this to your liking. The 'Mimirorg' folder should now look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"..\\Mimirorg\\mimir\n..\\Mimirorg\\typelibrary\n..\\Mimirorg\\docker-compose.yaml\n")),(0,i.kt)("p",null,"To spool up everything in docker use this command when standing in the 'Mimirorg' folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d --build\n")),(0,i.kt)("p",null,"If you now run this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps -a\n")),(0,i.kt)("p",null,"You should see all your docker images:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'CONTAINER ID   IMAGE                                            COMMAND                   CREATED         STATUS         PORTS                           NAMES\nb89d794be253   mimirorg_mimir-server                            "dotnet ModelBuilder\u2026"    9 seconds ago   Up 7 seconds   443/tcp, 0.0.0.0:5000->80/tcp   mimirserver\n84e7600fdcf9   mimirorg_tyle-server                             "dotnet TypeLibrary.\u2026"    9 seconds ago   Up 7 seconds   443/tcp, 0.0.0.0:5001->80/tcp   tyleserver\ned558855c314   mimirorg_mimir-client                            "/bin/sh -c \'\\"./star\u2026"   9 seconds ago   Up 7 seconds   0.0.0.0:3000->80/tcp            mimirclient\n42d843407f0d   mimirorg_tyle-client                             "/bin/sh -c \'\\"./star\u2026"   9 seconds ago   Up 7 seconds   0.0.0.0:3001->80/tcp            tyleclient\nd914b6d4d538   mcr.microsoft.com/mssql/server:2017-CU8-ubuntu   "/opt/mssql/bin/sqls\u2026"    9 seconds ago   Up 7 seconds   127.0.0.1:1433->1433/tcp        mssql\n')),(0,i.kt)("h3",{id:"\ufe0f-running-locally"},"\ud83c\udfc3\u200d\u2642\ufe0f Running Locally"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Client"),(0,i.kt)("th",{parentName:"tr",align:null},"Server"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2699\ufe0f Installation"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cd src/client")," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"npm install")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cd src/server")," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"dotnet build"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\udfc3\u200d\u2642\ufe0f Run Locally"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cd src/client")," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"npm start")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cd src/server/ModelBuilder.Api")," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"dotnet run"))))),(0,i.kt)("p",null,"You can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/whitecolor/yalc"},"Yalc")," to manage local package development. It allows you to work on your local package and test it as if it were installed from NPM, without publishing it."),(0,i.kt)("h2",{id:"-using-yalc-for-local-development"},"\ud83d\udcbb Using Yalc for Local Development"),(0,i.kt)("p",null,'Yalc allows you to work on the "component-library" locally and test it within the "mimir" project without publishing it to NPM. Here\'s how you can set it up:'),(0,i.kt)("h3",{id:"1-install-yalc"},"1. Install Yalc"),(0,i.kt)("p",null,"First, you need to install Yalc globally on your machine:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g yalc\n")),(0,i.kt)("h3",{id:"2-publish-the-component-library-to-yalc"},"2. Publish the Component Library to Yalc"),(0,i.kt)("p",null,'Navigate to the "component-library" directory and publish the package to Yalc\'s local store:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/component-library\nyalc publish\n")),(0,i.kt)("h3",{id:"3-add-the-component-library-to-the-mimir-project"},"3. Add the Component Library to the Mimir Project"),(0,i.kt)("p",null,'Now, navigate to the "mimir" project directory and add the "component-library" package using Yalc:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/mimir\nyalc add component-library\n")),(0,i.kt)("h3",{id:"4-link-the-component-library-optional"},"4. Link the Component Library (Optional)"),(0,i.kt)("p",null,'If you want to reflect the changes in the "component-library" instantly in the "mimir" project, you can use the ',(0,i.kt)("inlineCode",{parentName:"p"},"yalc link")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/component-library\nyalc link mimir\n")),(0,i.kt)("h3",{id:"5-push-updates-optional"},"5. Push Updates (Optional)"),(0,i.kt)("p",null,'Whenever you make changes to the "component-library," you can push the updates to the "mimir" project using:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yalc push\n")),(0,i.kt)("h3",{id:"6-remove-the-component-library-optional"},"6. Remove the Component Library (Optional)"),(0,i.kt)("p",null,'If you want to remove the "component-library" from the "mimir" project and revert to the NPM version, you can use:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/mimir\nyalc remove component-library\n")),(0,i.kt)("h3",{id:"7-update-the-component-library-optional"},"7. Update the Component Library (Optional)"),(0,i.kt)("p",null,'To update the "component-library" in the "mimir" project with the latest version from Yalc\'s local store, you can use:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd path/to/mimir\nyalc update component-library\n")),(0,i.kt)("h2",{id:"-contributing"},"\ud83d\udc4b Contributing"),(0,i.kt)("p",null,"We welcome community pull requests for bug fixes, enhancements, and documentation. See ",(0,i.kt)("a",{parentName:"p",href:"/documents/docs/Mimir/contribute"},"How to contribute")," for more information."),(0,i.kt)("h2",{id:"-architecture"},"\ud83c\udfec Architecture"),(0,i.kt)("p",null,"Architecture sketches overall. See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mimir-org/documents/blob/main/architecture/mimir_architecture_overall.pdf"},"Mimir overall")," for more information."),(0,i.kt)("h3",{id:"-code-of-conduct"},"\ud83d\udcdc Code of Conduct"),(0,i.kt)("p",null,"This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"https://dotnetfoundation.org/about/code-of-conduct"},".NET Foundation Code of Conduct"),"."),(0,i.kt)("h2",{id:"\ufe0f-license"},"\u26a0\ufe0f License"),(0,i.kt)("p",null,"Distributed under the MIT License. See ",(0,i.kt)("a",{parentName:"p",href:"/documents/docs/Mimir/license"},"LICENSE")," for more information."),(0,i.kt)("h2",{id:"-contact"},"\ud83e\udd1d Contact"),(0,i.kt)("p",null,"Mimir-org - ",(0,i.kt)("a",{parentName:"p",href:"mailto:orgmimir@gmail.com"},"orgmimir@gmail.com")),(0,i.kt)("p",null,"Project Link: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mimir-org/mimir"},"https://github.com/mimir-org/mimir")))}u.isMDXComponent=!0},3209:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/mimirDarkLogo-d26f5e180b0e1f7014a000f2987eb2e9.png"}}]);