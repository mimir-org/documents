"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[269],{908:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>a});var s=t(5893),r=t(1151);const n={},i="useAppSelector",c={id:"Mimir/Hooks/useAppSelector",title:"useAppSelector",description:"The useAppSelector hook is a custom hook that is often used in Redux Toolkit-based applications to replace the standard useSelector hook from the react-redux library. The purpose of this custom hook is to provide type safety for the Redux store's state when using TypeScript.",source:"@site/docs/Mimir/Hooks/useAppSelector.md",sourceDirName:"Mimir/Hooks",slug:"/Mimir/Hooks/useAppSelector",permalink:"/documents/docs/Mimir/Hooks/useAppSelector",draft:!1,unlisted:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docs/Mimir/Hooks/useAppSelector.md",tags:[],version:"current",frontMatter:{},sidebar:"mimirDocs",previous:{title:"Custom hooks",permalink:"/documents/docs/Mimir/Hooks/customHooks"},next:{title:"Remaining work",permalink:"/documents/docs/category/remaining-work"}},d={},a=[{value:"How it Works:",id:"how-it-works",level:3},{value:"Usage:",id:"usage",level:3}];function l(e){const o={code:"code",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h1,{id:"useappselector",children:"useAppSelector"}),"\n",(0,s.jsxs)(o.p,{children:["The ",(0,s.jsx)(o.code,{children:"useAppSelector"})," hook is a custom hook that is often used in Redux Toolkit-based applications to replace the standard ",(0,s.jsx)(o.code,{children:"useSelector"})," hook from the ",(0,s.jsx)(o.code,{children:"react-redux"})," library. The purpose of this custom hook is to provide type safety for the Redux store's state when using TypeScript."]}),"\n",(0,s.jsxs)(o.p,{children:["Here's a typical definition of ",(0,s.jsx)(o.code,{children:"useAppSelector"}),":"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-typescript",children:'import { TypedUseSelectorHook, useSelector } from "react-redux";\nimport { RootState } from "../store"; // Import your RootState type\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n'})}),"\n",(0,s.jsx)(o.h3,{id:"how-it-works",children:"How it Works:"}),"\n",(0,s.jsxs)(o.ol,{children:["\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"TypedUseSelectorHook"}),": This is a generic type that takes the type of the root state of your Redux store. It helps in providing type safety when you use the ",(0,s.jsx)(o.code,{children:"useSelector"})," hook."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"useSelector"}),": This is the standard hook from ",(0,s.jsx)(o.code,{children:"react-redux"})," that allows you to extract data from the Redux store state, using a selector function."]}),"\n"]}),"\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"RootState"}),": This is the type of the root state of your Redux store. It's usually defined when you combine your reducers."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["By using ",(0,s.jsx)(o.code,{children:"useAppSelector"}),", you can ensure that the selector functions you write are type-safe and will provide autocompletion and error checking based on the types defined in your Redux store's state."]}),"\n",(0,s.jsx)(o.h3,{id:"usage",children:"Usage:"}),"\n",(0,s.jsxs)(o.p,{children:["You would use ",(0,s.jsx)(o.code,{children:"useAppSelector"})," in the same way you use ",(0,s.jsx)(o.code,{children:"useSelector"}),". For example:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-typescript",children:"const someData = useAppSelector((state) => state.someReducer.someData);\n"})}),"\n",(0,s.jsxs)(o.p,{children:["This ensures that ",(0,s.jsx)(o.code,{children:"state.someReducer.someData"})," is type-safe and will give you TypeScript errors if you try to access properties that do not exist on ",(0,s.jsx)(o.code,{children:"someData"}),"."]})]})}function u(e={}){const{wrapper:o}={...(0,r.a)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,o,t)=>{t.d(o,{Z:()=>c,a:()=>i});var s=t(7294);const r={},n=s.createContext(r);function i(e){const o=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(n.Provider,{value:o},e.children)}}}]);