"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="Extend functionality - Detailed",l={unversionedId:"Mimir/Overview/react-redux-detailed",id:"Mimir/Overview/react-redux-detailed",title:"Extend functionality - Detailed",description:"It's not as complicated as it first seems",source:"@site/docs/Mimir/Overview/react-redux-detailed.md",sourceDirName:"Mimir/Overview",slug:"/Mimir/Overview/react-redux-detailed",permalink:"/docs/Mimir/Overview/react-redux-detailed",draft:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docusaurus-docs/docs/Mimir/Overview/react-redux-detailed.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mimirDocs",previous:{title:"Extend Functionality",permalink:"/docs/Mimir/Overview/react-redux"},next:{title:"React redux pitfalls",permalink:"/docs/Mimir/Overview/react-redux-pitfalls"}},s={},c=[{value:"It&#39;s not as complicated as it first seems",id:"its-not-as-complicated-as-it-first-seems",level:2},{value:"Step 1: Create a New Slice File",id:"step-1-create-a-new-slice-file",level:3},{value:"Step 2: Import Dependencies",id:"step-2-import-dependencies",level:3},{value:"Step 3: Define Initial State",id:"step-3-define-initial-state",level:3},{value:"Step 4: Create the Slice",id:"step-4-create-the-slice",level:3},{value:"Step 5: Export Actions",id:"step-5-export-actions",level:3},{value:"Step 6: Export Reducer",id:"step-6-export-reducer",level:3},{value:"Step 7: Update Root Reducer",id:"step-7-update-root-reducer",level:3},{value:"Step 8: Create and Export Selectors",id:"step-8-create-and-export-selectors",level:3},{value:"Step 9: Use Actions in Components",id:"step-9-use-actions-in-components",level:3},{value:"New Redux component",id:"new-redux-component",level:2},{value:"DemoTab.tsx",id:"demotabtsx",level:3},{value:"Adding DemoTab to InspectorModule.tsx",id:"adding-demotab-to-inspectormoduletsx",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extend-functionality---detailed"},"Extend functionality - Detailed"),(0,r.kt)("h2",{id:"its-not-as-complicated-as-it-first-seems"},"It's not as complicated as it first seems"),(0,r.kt)("p",null,"Extending the functionality in redux is the hardest part of this process,\nat the end there is an example of how to use Redux in your component,\nthat part is fairly easy."),(0,r.kt)("h3",{id:"step-1-create-a-new-slice-file"},"Step 1: Create a New Slice File"),(0,r.kt)("p",null,"Create a new file for your slice, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"newFeatureSlice.ts"),", inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/client/src/store/")," directory."),(0,r.kt)("h3",{id:"step-2-import-dependencies"},"Step 2: Import Dependencies"),(0,r.kt)("p",null,"Import the necessary modules from Redux Toolkit and any other dependencies you may need."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n")),(0,r.kt)("h3",{id:"step-3-define-initial-state"},"Step 3: Define Initial State"),(0,r.kt)("p",null,"Define the initial state for your slice. This can be an object, array, or any other data type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const initialState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n")),(0,r.kt)("h3",{id:"step-4-create-the-slice"},"Step 4: Create the Slice"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"createSlice")," function to create a slice. Define your reducers within the ",(0,r.kt)("inlineCode",{parentName:"p"},"reducers")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const newFeatureSlice = createSlice({\n  name: 'newFeature',\n  initialState,\n  reducers: {\n    fetchDataStart: (state) => {\n      state.loading = true;\n    },\n    fetchDataSuccess: (state, action: PayloadAction<any>) => {\n      state.data = action.payload;\n      state.loading = false;\n    },\n    fetchDataFailure: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n  },\n});\n")),(0,r.kt)("h3",{id:"step-5-export-actions"},"Step 5: Export Actions"),(0,r.kt)("p",null,"Export the actions generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"createSlice"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const { fetchDataStart, fetchDataSuccess, fetchDataFailure } = newFeatureSlice.actions;\n")),(0,r.kt)("h3",{id:"step-6-export-reducer"},"Step 6: Export Reducer"),(0,r.kt)("p",null,"Export the reducer so it can be combined with other reducers in the store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export default newFeatureSlice.reducer;\n")),(0,r.kt)("h3",{id:"step-7-update-root-reducer"},"Step 7: Update Root Reducer"),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"commonReducer.ts")," or equivalent, import the new reducer and add it to the root reducer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import newFeatureReducer from './newFeatureSlice';\n\nconst rootReducer = combineReducers({\n  // ...other reducers,\n  newFeature: newFeatureReducer,\n});\n")),(0,r.kt)("h3",{id:"step-8-create-and-export-selectors"},"Step 8: Create and Export Selectors"),(0,r.kt)("p",null,"Create selectors to read specific pieces of state. You can place these in a ",(0,r.kt)("inlineCode",{parentName:"p"},"selectors.ts")," file or within your slice file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const selectNewFeatureData = (state: RootState) => state.newFeature.data;\n")),(0,r.kt)("h3",{id:"step-9-use-actions-in-components"},"Step 9: Use Actions in Components"),(0,r.kt)("p",null,"Now you can use the actions and selectors in your React components using ",(0,r.kt)("inlineCode",{parentName:"p"},"useDispatch")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelector"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const dispatch = useDispatch();\nconst data = useSelector(selectNewFeatureData);\n\ndispatch(fetchDataStart());\n")),(0,r.kt)("h2",{id:"new-redux-component"},"New Redux component"),(0,r.kt)("p",null,"Below is a demo component that can serve as a new tab in the ",(0,r.kt)("inlineCode",{parentName:"p"},"InspectorModule"),". This component, named ",(0,r.kt)("inlineCode",{parentName:"p"},"DemoTab"),", demonstrates how to properly handle state changes in Redux without direct state mutations."),(0,r.kt)("h3",{id:"demotabtsx"},"DemoTab.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateProject } from '../../../store/reducers/projectReducer'; // Import your projectReducer\nimport { RootState } from '../../../store'; // Import your RootState\n\nconst DemoTab: React.FC = () => {\n  const dispatch = useDispatch();\n  const projectState = useSelector((state: RootState) => state.project); // Replace with your project state selector\n  const [newLabel, setNewLabel] = useState('');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewLabel(e.target.value);\n  };\n\n  const updateLabel = () => {\n    // Create a copy of the projectState and update the label\n    const updatedProjectState = {\n      ...projectState,\n      label: newLabel,\n    };\n\n    // Dispatch the updated project state\n    dispatch(updateProject(updatedProjectState));\n  };\n\n  return (\n    <div>\n      <h2>Demo Tab</h2>\n      <input\n        type=\"text\"\n        placeholder=\"New Label\"\n        value={newLabel}\n        onChange={handleInputChange}\n      />\n      <button onClick={updateLabel}>Update Label</button>\n    </div>\n  );\n};\n\nexport default DemoTab;\n")),(0,r.kt)("h3",{id:"adding-demotab-to-inspectormoduletsx"},"Adding DemoTab to InspectorModule.tsx"),(0,r.kt)("p",null,"To add this new ",(0,r.kt)("inlineCode",{parentName:"p"},"DemoTab")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"InspectorModule"),", you can update the ",(0,r.kt)("inlineCode",{parentName:"p"},"InspectorModule.tsx")," file as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Import ",(0,r.kt)("inlineCode",{parentName:"li"},"DemoTab")," at the top of your ",(0,r.kt)("inlineCode",{parentName:"li"},"InspectorModule.tsx"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import DemoTab from './tabs/DemoTab';\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Add a new case for ",(0,r.kt)("inlineCode",{parentName:"li"},"DemoTab")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," statement that renders the tabs:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"switch (selectedTab) {\n  case 'admin':\n    return <AdminTab />;\n  case 'attribute':\n    return <AttributeTab />;\n  case 'terminal':\n    return <TerminalTab />;\n  case 'demo': // New case\n    return <DemoTab />;\n  default:\n    return null;\n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Update the ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"onTabChange")," to include the new 'demo' tab:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const [selectedTab, setSelectedTab] = useState<"admin" | "attribute" | "terminal" | "demo">("admin");\n\nconst onTabChange = (value: "admin" | "attribute" | "terminal" | "demo") => {\n  setSelectedTab(value);\n};\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Add a new button or tab UI element to switch to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DemoTab"),".")))}u.isMDXComponent=!0}}]);