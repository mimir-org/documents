"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,k=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return n?o.createElement(k,s(s({ref:t},c),{},{components:n})):o.createElement(k,s({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={},s="Custom hooks",i={unversionedId:"Mimir/Hooks/customHooks",id:"Mimir/Hooks/customHooks",title:"Custom hooks",description:"There are many custom hooks in mimir, this serves only as an overview.",source:"@site/docs/Mimir/Hooks/customHooks.md",sourceDirName:"Mimir/Hooks",slug:"/Mimir/Hooks/customHooks",permalink:"/documents/docs/Mimir/Hooks/customHooks",draft:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docusaurus-docs/docs/Mimir/Hooks/customHooks.md",tags:[],version:"current",frontMatter:{},sidebar:"mimirDocs",previous:{title:"Hooks documentation",permalink:"/documents/docs/category/hooks-documentation"},next:{title:"useAppSelector",permalink:"/documents/docs/Mimir/Hooks/useAppSelector"}},l={},u=[{value:"Custom Hooks Documentation",id:"custom-hooks-documentation",level:2},{value:"useCompanySelector",id:"usecompanyselector",level:3},{value:"useDebounce",id:"usedebounce",level:3},{value:"useDebounceState",id:"usedebouncestate",level:3},{value:"useEffectOnce",id:"useeffectonce",level:3},{value:"useGetSelectedFlowNodes",id:"usegetselectedflownodes",level:3},{value:"useIsOverflowing",id:"useisoverflowing",level:3},{value:"useLocalStorage",id:"uselocalstorage",level:3},{value:"useOutsideClick",id:"useoutsideclick",level:3}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-hooks"},"Custom hooks"),(0,r.kt)("p",null,"There are many custom hooks in mimir, this serves only as an overview."),(0,r.kt)("h2",{id:"custom-hooks-documentation"},"Custom Hooks Documentation"),(0,r.kt)("p",null,"Below is the documentation for the custom hooks available in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/client/src/hooks")," directory of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mimir-org/mimir/"},"Mimir repository"),"."),(0,r.kt)("h3",{id:"usecompanyselector"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useCompanySelector.ts"},"useCompanySelector")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To get a company based on its domain.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useCompanySelector } from 'hooks/useCompanySelector';\n\nconst MyComponent = () => {\n  const company = useCompanySelector('example.com', 'id_123');\n  return <div>{company ? company.name : 'No company found'}</div>;\n};\n")))),(0,r.kt)("h3",{id:"usedebounce"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useDebounce.ts"},"useDebounce")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To debounce the update of a state variable.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useDebounce } from 'hooks/useDebounce';\n\nconst SearchComponent = () => {\nconst [query, setQuery] = useState('');\nconst debouncedQuery = useDebounce(query, 300);\n\nuseEffect(() => {\n  // Perform API call with debouncedQuery\n}, [debouncedQuery]);\n\nreturn <input value={query} onChange={(e) => setQuery(e.target.value)} />;\n};\n\n")))),(0,r.kt)("h3",{id:"usedebouncestate"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useDebounceState.ts"},"useDebounceState")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": Combines ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useDebounce"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useDebounceState } from 'hooks/useDebounceState';\n\nconst SearchComponent = () => {\nconst [searchInput, setSearchInput, debouncedSearchInput] = useDebounceState('', 300);\n\nuseEffect(() => {\n  // Perform API call with debouncedSearchInput\n}, [debouncedSearchInput]);\n\nreturn <input value={searchInput} onChange={(e) => setSearchInput(e.target.value)} />;\n};\n\n")))),(0,r.kt)("h3",{id:"useeffectonce"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useEffectOnce.ts"},"useEffectOnce")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To run an effect only once. This can probably be deleted as useEffect with an empty dependency array will do the same thing.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useEffectOnce } from 'hooks/useEffectOnce';\n\nconst MyComponent = () => {\nuseEffectOnce(() => {\n  // Code to run only once\n});\n\nreturn <div>Content</div>;\n};\n\n")))),(0,r.kt)("h3",{id:"usegetselectedflownodes"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useGetSelectedFlowNodes.ts"},"useGetSelectedFlowNodes")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To get selected nodes in a flow.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useGetSelectedFlowNodes } from 'hooks/useGetSelectedFlowNodes';\n\nconst FlowComponent = () => {\nconst selectedNodes = useGetSelectedFlowNodes();\n\nreturn <div>{`Selected Nodes: ${selectedNodes.length}`}</div>;\n};\n")))),(0,r.kt)("h3",{id:"useisoverflowing"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useIsOverflowing.ts"},"useIsOverflowing")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To check if an element is overflowing its boundary.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useIsOverflowing } from 'hooks/useIsOverflowing';\n\nconst TextComponent = () => {\n  const { overflowRef, isOverflowing } = useIsOverflowing();\n\n  return (\n      <div ref={overflowRef}>\n          {isOverflowing ? 'Text is overflowing' : 'Text fits'}\n      </div>\n  );\n};\n")))),(0,r.kt)("h3",{id:"uselocalstorage"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useLocalStorage.ts"},"useLocalStorage")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To read and write data to local storage.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useLocalStorage } from 'hooks/useLocalStorage';\n\nconst StorageComponent = () => {\n  const [storedValue, setValue] = useLocalStorage('myKey', 'initialValue');\n\n  return (\n      <button onClick={() => setValue('newValue')}>\n          Update Local Storage\n      </button>\n  );\n};\n")))),(0,r.kt)("h3",{id:"useoutsideclick"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useOutsideClick.ts"},"useOutsideClick")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Purpose"),": To detect clicks outside a given element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Usage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useOutsideClick } from 'hooks/useOutsideClick';\n\nconst DropdownComponent = () => {\n  const ref = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useOutsideClick(ref, () => setIsOpen(false));\n\n  return (\n      <div ref={ref}>\n          <button onClick={() => setIsOpen(!isOpen)}>Toggle Dropdown</button>\n              {isOpen && <div>Dropdown Content</div>}\n      </div>\n  );\n};\n")))))}m.isMDXComponent=!0}}]);