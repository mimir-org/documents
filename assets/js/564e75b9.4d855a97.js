"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[409],{3615:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=s(5893),t=s(1151);const r={},c="Custom hooks",i={id:"Mimir/Hooks/customHooks",title:"Custom hooks",description:"There are many custom hooks in mimir, this serves only as an overview.",source:"@site/docs/Mimir/Hooks/customHooks.md",sourceDirName:"Mimir/Hooks",slug:"/Mimir/Hooks/customHooks",permalink:"/documents/docs/Mimir/Hooks/customHooks",draft:!1,unlisted:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docs/Mimir/Hooks/customHooks.md",tags:[],version:"current",frontMatter:{},sidebar:"mimirDocs",previous:{title:"Hooks documentation",permalink:"/documents/docs/category/hooks-documentation"},next:{title:"useAppSelector",permalink:"/documents/docs/Mimir/Hooks/useAppSelector"}},l={},d=[{value:"Custom Hooks Documentation",id:"custom-hooks-documentation",level:2},{value:"useCompanySelector",id:"usecompanyselector",level:3},{value:"useDebounce",id:"usedebounce",level:3},{value:"useDebounceState",id:"usedebouncestate",level:3},{value:"useEffectOnce",id:"useeffectonce",level:3},{value:"useGetSelectedFlowNodes",id:"usegetselectedflownodes",level:3},{value:"useIsOverflowing",id:"useisoverflowing",level:3},{value:"useLocalStorage",id:"uselocalstorage",level:3},{value:"useOutsideClick",id:"useoutsideclick",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"custom-hooks",children:"Custom hooks"}),"\n",(0,o.jsx)(n.p,{children:"There are many custom hooks in mimir, this serves only as an overview."}),"\n",(0,o.jsx)(n.h2,{id:"custom-hooks-documentation",children:"Custom Hooks Documentation"}),"\n",(0,o.jsxs)(n.p,{children:["Below is the documentation for the custom hooks available in the ",(0,o.jsx)(n.code,{children:"src/client/src/hooks"})," directory of the ",(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/",children:"Mimir repository"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"usecompanyselector",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useCompanySelector.ts",children:"useCompanySelector"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To get a company based on its domain."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useCompanySelector } from 'hooks/useCompanySelector';\n\nconst MyComponent = () => {\n  const company = useCompanySelector('example.com', 'id_123');\n  return <div>{company ? company.name : 'No company found'}</div>;\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"usedebounce",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useDebounce.ts",children:"useDebounce"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To debounce the update of a state variable."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useDebounce } from 'hooks/useDebounce';\n\nconst SearchComponent = () => {\nconst [query, setQuery] = useState('');\nconst debouncedQuery = useDebounce(query, 300);\n\nuseEffect(() => {\n  // Perform API call with debouncedQuery\n}, [debouncedQuery]);\n\nreturn <input value={query} onChange={(e) => setQuery(e.target.value)} />;\n};\n\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"usedebouncestate",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useDebounceState.ts",children:"useDebounceState"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": Combines ",(0,o.jsx)(n.code,{children:"useState"})," and ",(0,o.jsx)(n.code,{children:"useDebounce"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useDebounceState } from 'hooks/useDebounceState';\n\nconst SearchComponent = () => {\nconst [searchInput, setSearchInput, debouncedSearchInput] = useDebounceState('', 300);\n\nuseEffect(() => {\n  // Perform API call with debouncedSearchInput\n}, [debouncedSearchInput]);\n\nreturn <input value={searchInput} onChange={(e) => setSearchInput(e.target.value)} />;\n};\n\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"useeffectonce",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useEffectOnce.ts",children:"useEffectOnce"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To run an effect only once. This can probably be deleted as useEffect with an empty dependency array will do the same thing."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useEffectOnce } from 'hooks/useEffectOnce';\n\nconst MyComponent = () => {\nuseEffectOnce(() => {\n  // Code to run only once\n});\n\nreturn <div>Content</div>;\n};\n\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"usegetselectedflownodes",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useGetSelectedFlowNodes.ts",children:"useGetSelectedFlowNodes"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To get selected nodes in a flow."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useGetSelectedFlowNodes } from 'hooks/useGetSelectedFlowNodes';\n\nconst FlowComponent = () => {\nconst selectedNodes = useGetSelectedFlowNodes();\n\nreturn <div>{`Selected Nodes: ${selectedNodes.length}`}</div>;\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"useisoverflowing",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useIsOverflowing.ts",children:"useIsOverflowing"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To check if an element is overflowing its boundary."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useIsOverflowing } from 'hooks/useIsOverflowing';\n\nconst TextComponent = () => {\n  const { overflowRef, isOverflowing } = useIsOverflowing();\n\n  return (\n      <div ref={overflowRef}>\n          {isOverflowing ? 'Text is overflowing' : 'Text fits'}\n      </div>\n  );\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"uselocalstorage",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useLocalStorage.ts",children:"useLocalStorage"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To read and write data to local storage."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useLocalStorage } from 'hooks/useLocalStorage';\n\nconst StorageComponent = () => {\n  const [storedValue, setValue] = useLocalStorage('myKey', 'initialValue');\n\n  return (\n      <button onClick={() => setValue('newValue')}>\n          Update Local Storage\n      </button>\n  );\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"useoutsideclick",children:(0,o.jsx)(n.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/hooks/useOutsideClick.ts",children:"useOutsideClick"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": To detect clicks outside a given element."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { useOutsideClick } from 'hooks/useOutsideClick';\n\nconst DropdownComponent = () => {\n  const ref = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useOutsideClick(ref, () => setIsOpen(false));\n\n  return (\n      <div ref={ref}>\n          <button onClick={() => setIsOpen(!isOpen)}>Toggle Dropdown</button>\n              {isOpen && <div>Dropdown Content</div>}\n      </div>\n  );\n};\n"})}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>c});var o=s(7294);const t={},r=o.createContext(t);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);