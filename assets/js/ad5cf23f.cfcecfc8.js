"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[722],{2739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(5893),s=n(1151);const o={sidebar_position:2},a="Current state of the code base",i={id:"Tyle/current-state",title:"Current state of the code base",description:"Backend",source:"@site/docs/Tyle/current-state.md",sourceDirName:"Tyle",slug:"/Tyle/current-state",permalink:"/documents/docs/Tyle/current-state",draft:!1,unlisted:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docs/Tyle/current-state.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tyleDocs",previous:{title:"Introduction",permalink:"/documents/docs/Tyle/intro"},next:{title:"FAQ",permalink:"/documents/docs/Tyle/faq"}},l={},c=[{value:"Backend",id:"backend",level:2},{value:"Tyle.Core",id:"tylecore",level:3},{value:"Tyle.Application",id:"tyleapplication",level:3},{value:"Tyle.Converters",id:"tyleconverters",level:3},{value:"Tyle.Persistence",id:"tylepersistence",level:3},{value:"Tyle.External",id:"tyleexternal",level:3},{value:"Mimirorg.Authentication",id:"mimirorgauthentication",level:3},{value:"Tyle.Api",id:"tyleapi",level:3}];function d(e){const t={h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"current-state-of-the-code-base",children:"Current state of the code base"}),"\n",(0,r.jsx)(t.h2,{id:"backend",children:"Backend"}),"\n",(0,r.jsx)(t.p,{children:"The primary job for the Tyle backend is to serve as a CRUD-application for creating IMF types, as well as forwarding\napproved types to an external type library. Tyle currently uses Common Library as its type library."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"backend diagram",src:n(2624).Z+"",width:"1500",height:"1135"})}),"\n",(0,r.jsx)(t.p,{children:"The diagram above shows the dependencies between the different projects in the backend. We will go through these\nprojects, outlining their role in the application as a whole, and commenting on work that remains to be done."}),"\n",(0,r.jsx)(t.h3,{id:"tylecore",children:"Tyle.Core"}),"\n",(0,r.jsx)(t.p,{children:"Contains the core models and enums used to define the IMF types (attributes, terminals and blocks) and external\nreferences (classifiers, media, predicates, purposes and units)."}),"\n",(0,r.jsx)(t.h3,{id:"tyleapplication",children:"Tyle.Application"}),"\n",(0,r.jsx)(t.p,{children:"Contains the request DTOs for creating and updating types and external references, as well as interfaces for the\nrepositories for types and external references. Also contains a service for the approval process of types, as well as\nan interface for user information."}),"\n",(0,r.jsx)(t.h3,{id:"tyleconverters",children:"Tyle.Converters"}),"\n",(0,r.jsx)(t.p,{children:"Contains the code used for exporting types from the domain models to the export format, JSON-LD. This project uses the\ndotNetRdf package, which means adding new RDF export formats can be done very easily."}),"\n",(0,r.jsx)(t.p,{children:"This project also contains all the IRIs used by the software. Some of these (for instance the symbol ontology IRIs) are\ntemporary, and when these change the application will fail."}),"\n",(0,r.jsx)(t.h3,{id:"tylepersistence",children:"Tyle.Persistence"}),"\n",(0,r.jsx)(t.p,{children:"Contains the implementations of the repository interfaces. The data export to the type library is currently done by the\nrepositories, this should probably be moved to a separate project or service."}),"\n",(0,r.jsx)(t.h3,{id:"tyleexternal",children:"Tyle.External"}),"\n",(0,r.jsx)(t.p,{children:"Contains the code used for fetching data from the external reference data library. The code as is is directly geared\ntowards using Common Library for this, and should probably be rewritten to be more general, so switching reference data\nlibraries can be more easily done."}),"\n",(0,r.jsx)(t.h3,{id:"mimirorgauthentication",children:"Mimirorg.Authentication"}),"\n",(0,r.jsx)(t.p,{children:"Contains the code used for authentication and authorization. Also contains code for sending e-mails. This code is\n(mostly) disabled at the moment. E-mails notifying users of new users, request for types approval and so on should be\nimplemented. It should probably also be extracted to a separate project."}),"\n",(0,r.jsx)(t.h3,{id:"tyleapi",children:"Tyle.Api"}),"\n",(0,r.jsx)(t.p,{children:"Contains the startup code, controllers and views."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},2624:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/tyle-backend-diagram-5b11dd8bb225d9790ac740c281446c68.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(7294);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);