"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[790],{3130:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=i(5893),a=i(1151);const r={sidebar_position:4},s="React redux pitfalls",o={id:"Mimir/Overview/react-redux-pitfalls",title:"React redux pitfalls",description:"State mutation",source:"@site/docs/Mimir/Overview/react-redux-pitfalls.md",sourceDirName:"Mimir/Overview",slug:"/Mimir/Overview/react-redux-pitfalls",permalink:"/documents/docs/Mimir/Overview/react-redux-pitfalls",draft:!1,unlisted:!1,editUrl:"https://github.com/mimir-org/documents/tree/main/docs/Mimir/Overview/react-redux-pitfalls.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"mimirDocs",previous:{title:"Extend functionality - Detailed",permalink:"/documents/docs/Mimir/Overview/react-redux-detailed"},next:{title:"How to contribute",permalink:"/documents/docs/Mimir/contribute"}},c={},d=[{value:"State mutation",id:"state-mutation",level:2},{value:"Examples of state mutation in Mimir",id:"examples-of-state-mutation-in-mimir",level:2},{value:"Fixes",id:"fixes",level:3},{value:"AdminTab.tsx",id:"admintabtsx",level:4},{value:"Direct mutation of <code>aspectObject</code>:",id:"direct-mutation-of-aspectobject",level:5},{value:"AttributeTab.tsx &amp; AttributeItem.tsx",id:"attributetabtsx--attributeitemtsx",level:4},{value:"Direct mutation of <code>attributeToUpdate</code>:",id:"direct-mutation-of-attributetoupdate",level:5}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...t.components},{Details:i}=e;return i||function(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"react-redux-pitfalls",children:"React redux pitfalls"}),"\n",(0,n.jsx)(e.h2,{id:"state-mutation",children:"State mutation"}),"\n",(0,n.jsx)(e.p,{children:"When updating the state in a reducer, it's important to remember that the state should be treated as immutable. Modifying the state directly can lead to unexpected behaviour and make it difficult to track changes and understand the state flow.\nHere's an example of an incorrect state mutation within a reducer:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-js",children:"// Incorrect Approach\nconst myReducer = (state, action) => {\n  state.someProperty = action.payload; // Directly mutating the state object\n  return state;\n};\n"})}),"\n",(0,n.jsx)(e.p,{children:"Instead, you should create a new state object or clone the existing state and make modifications on the new object. This ensures that the original state remains unchanged.\nHere's the recommended approach:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-js",children:"// Correct Approach\nconst myReducer = (state, action) => {\n  return {\n    ...state, // Cloning the existing state\n    someProperty: action.payload, // Modifying the cloned state\n  };\n};\n"})}),"\n",(0,n.jsx)(e.p,{children:"By correctly handling state mutations, you maintain the immutability principle, which is crucial for the predictability and maintainability of your Redux state."}),"\n",(0,n.jsx)(e.h2,{id:"examples-of-state-mutation-in-mimir",children:"Examples of state mutation in Mimir"}),"\n",(0,n.jsx)(e.p,{children:"Delete this file when proplems are fixed."}),"\n",(0,n.jsx)(e.p,{children:"I took the liberty of merging in state mutations to the dev branch, this way you can fix them as a trial. I have also included a working solution below, but I would like you to try and find the errors before you look a the solution."}),"\n",(0,n.jsxs)(e.ol,{children:["\n",(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/components/modules/inspector/tabs/AdminTab.tsx",children:"AdminTab.tsx"})}),"\n",(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/components/modules/inspector/tabs/AttributeTab.tsx",children:"AttributeTab.tsx"})}),"\n",(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/components/modules/inspector/tabs/TerminalTab.tsx",children:"TerminalTab.tsx"})}),"\n",(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:"https://github.com/mimir-org/mimir/blob/dev/src/client/src/components/modules/inspector/tabComponents/AttributeItem.tsx",children:"AttributeItem.tsx"})}),"\n"]}),"\n",(0,n.jsx)(e.h3,{id:"fixes",children:"Fixes"}),"\n",(0,n.jsx)(e.h4,{id:"admintabtsx",children:"AdminTab.tsx"}),"\n",(0,n.jsxs)(e.h5,{id:"direct-mutation-of-aspectobject",children:["Direct mutation of ",(0,n.jsx)(e.code,{children:"aspectObject"}),":"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"const onSubmit = () => {\n  aspectObject.label = labelValue; // Direct mutation\n  aspectObject.description = descriptionValue; // Direct mutation\n  dispatch(updateProject({ ...projectState }));\n};\n"})}),"\n",(0,n.jsxs)(i,{children:[(0,n.jsx)("summary",{children:"View fix"}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:"const onSubmit = () => {\n  const updatedAspectObject = {\n    ...aspectObject,\n    label: labelValue,\n    description: descriptionValue,\n  };\n  dispatch(\n    updateProject({ ...projectState, aspectObject: updatedAspectObject }),\n  );\n};\n"})})]}),"\n",(0,n.jsx)(e.h4,{id:"attributetabtsx--attributeitemtsx",children:"AttributeTab.tsx & AttributeItem.tsx"}),"\n",(0,n.jsxs)(e.h5,{id:"direct-mutation-of-attributetoupdate",children:["Direct mutation of ",(0,n.jsx)(e.code,{children:"attributeToUpdate"}),":"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"const handleInputChange = (id: string, value: string) => {\n  const attributeToUpdate = attributes.find((attr) => attr.id === id);\n  if (attributeToUpdate) {\n    attributeToUpdate.value = value; // Direct mutation\n    dispatch(updateProject({ ...projectState }));\n  }\n};\n"})}),"\n",(0,n.jsxs)(i,{children:[(0,n.jsx)("summary",{children:"View fix"}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"const handleInputChange = (id: string, value: string) => {\n  const updatedAttributes = attributes.map((attr) =>\n    attr.id === id ? { ...attr, value } : attr,\n  );\n  dispatch(updateProject({ ...projectState, attributes: updatedAttributes }));\n};\n"})})]}),"\n",(0,n.jsx)(e.p,{children:"These fixes ensure that the state is not directly mutated, adhering to the principles of immutability in Redux."}),"\n",(0,n.jsx)(e.p,{children:"Would you like to know more about any specific part?"})]})}function u(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},1151:(t,e,i)=>{i.d(e,{Z:()=>o,a:()=>s});var n=i(7294);const a={},r=n.createContext(a);function s(t){const e=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),n.createElement(r.Provider,{value:e},t.children)}}}]);